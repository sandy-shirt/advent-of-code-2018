#-*-coding:utf-8-*-
import re
import collections

def get_digits(line):
    return (int(match[0]) for match in re.finditer(r"\d+", line))
file = """
181, 47
337, 53
331, 40
137, 57
200, 96
351, 180
157, 332
113, 101
285, 55
189, 188
174, 254
339, 81
143, 61
131, 155
239, 334
357, 291
290, 89
164, 149
248, 73
311, 190
54, 217
285, 268
354, 113
318, 191
182, 230
156, 252
114, 232
159, 299
324, 280
152, 155
295, 293
194, 214
252, 345
233, 172
272, 311
230, 82
62, 160
275, 96
335, 215
185, 347
134, 272
58, 113
112, 155
220, 83
153, 244
279, 149
302, 167
185, 158
72, 91
264, 67
""".strip().split('\n')
def part1(file):
    coords = list(map(tuple, map(get_digits, file)))
    spots = {}
    # Define the bounds of the area we care about.
    # We define these as one past the farthest coordinate in each direction
    # Anything more than that is "infinite" and we don't care
    minx = min(x for x, y in coords) - 1
    maxx = max(x for x, y in coords) + 1
    miny = min(y for x, y in coords) - 1
    maxy = max(y for x, y in coords) + 1
    # Create the map of closest coordinates to each spot
    for x in range(minx, maxx + 1):
        for y in range(miny, maxy + 1):
            closest_coord = None
            closest_num = float('inf')
            for cx, cy in coords:
                dist = abs(x - cx) + abs(y - cy)
                if dist < closest_num:
                    closest_num = dist
                    closest_coord = (cx, cy)
                elif dist == closest_num:
                    closest_coord = None
            spots[x, y] = closest_coord
    # disqualify all closest-coordinates on the edge of the map (since they're infinite)
    dqd = set()
    for x in range(minx, maxx + 1):
        dqd.add(spots[x, miny])
        dqd.add(spots[x, maxy])
    for y in range(miny, maxy + 1):
        dqd.add(spots[minx, y])
        dqd.add(spots[maxx, y])
    # apply disqualifications
    coun = collections.Counter(spots.values())
    del coun[None]
    for q in dqd:
        del coun[q]
    ((key, size),) = coun.most_common(1)
    return size
def part2(file):
    coords = list(map(tuple, map(get_digits, file)))
    minx = min(x for x, y in coords)
    maxx = max(x for x, y in coords)
    miny = min(y for x, y in coords)
    maxy = max(y for x, y in coords)
    c = 0
    for x in range(minx, maxx + 1):
        for y in range(miny, maxy + 1):
            s = sum(
                abs(x - cx) + abs(y - cy)
                for cx, cy in coords
            )
            if s < 10000:
                c += 1
    return c
# print(part1(list(file)))
print(part2(list(file)))
